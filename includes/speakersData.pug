-
  const speakers = [
    {
      name: "Felix Rieseberg",
      image: "src/assets/speaker-felixrieseberg.jpg",
      job: "Senior Staff Engineer",
      org: "Slack",
      twitter: "@felixrieseberg",
      github: "@felixrieseberg",
      session_url: "#felixrieseberg",
      session_title: "TypeScript: Why and how we adopted it at Slack",
      session_summary: "At Slack, we use one JavaScript codebase to build a multi-threaded desktop application, routinely interacting with native code. Managing large JavaScript codebases is challenging - we need a guarantee that the individual pieces fit together. In the desktop world, a small mistake is likely to result in a crash. To that end, we adopted TypeScript and quickly learned to stop worrying and love the compiler. See an introduction and a detailed account of porting a large code base, learn why exactly TypeScript is so popular, what the downsides are, and how you would slowly adopt it in your development."
    }, {
      name: "Andrew Betts",
      image: "src/assets/speaker-triblondon.jpg",
      job: "Technical Product Manager",
      org: "Fastly",
      twitter: "@triblondon",
      github: "@triblondon",
      session_url: "#triblondon",
      session_title: "Making less of the web with feature policy",
      session_summary: "The web platform has seen a decade of furious expansion, with websites now able to access USB, vibration, bluetooth, and geolocation, as well as store huge amounts of data on end user devices, trigger background sync and notifications, and even get paid from users' digital wallets.  But with this expansion has come an increased scope for attacks, costly mistakes and performance regressions.  Feature policy is a new feature designed to actually disable or limit features of the platform.  With a feature policy, developers can solve performance issues, improve security, police their development team's best practices, and even stop third party scripts from misbehaving. All with one new HTTP header."
    }, {
      name: "Mariko Kosaka",
      image: "src/assets/speaker-kosamari.jpg",
      job: "Web Engineer",
      org: "Google",
      twitter: "@kosamari",
      github: "@kosamari",
      session_url: "#kosamari",
      session_title: "世界中誰もが使えるサービスを目指して、Web標準で作るガラケーサイト",
      session_summary: "今、東南アジアやアフリカでKaiOSを始めとしたガラケーやAndroidGoといった超低スペックモデルのスマートフォンが市場を拡大しています。これらのデバイスが昔と違うのはモダンウェブブラウザが搭載されていること！！以前のようにcHTMLとWAPで書き分けると言った必要もなければ、デスクトップサイトとコードベースを分ける必要もありません。だからといって、非力なCPUしか持っていないこれらのデバイスではSPAフロントエンドアプリを動かすのは厳しく、かなり気を使った設計をする必要があります。この発表では実際にKaiOSガラケー対応のゲームを作成する過程で発見したパフォーマンステクニックを紹介します。「描画はCanvas、でもアクセシビリティのためにDOMもopacity:0で入れる」「時間がかかる処理は段階処理にしてユーザーに遅いと思わせない仕掛けを作る」といったエピソードが満載です。"
    }, {
      name: "unknown",
      image: "src/assets/speaker-unknown.jpg",
      job: "",
      org: "",
      twitter: "@ids",
      github: "@ids",
      session_url: "#ids",
      session_title: "",
      session_summary: ""
    }
  ];
